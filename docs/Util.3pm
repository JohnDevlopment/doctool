.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Doctool::Util 3"
.TH Doctool::Util 3 "2021-09-23" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Doctool::Util \- Utility subroutines for Doctool
.SH "VERSION"
.IX Header "VERSION"
Version 0.10
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module exports a number of subroutines that help with the functionality of Doctool.
Strictly speaking, these subroutines are not only useful for \fIDoctool\fR; they can be used in
general practice.
.SH "EXPORT"
.IX Header "EXPORT"
The following subroutines are exported by this module.
.IP "append( variable, value )" 4
.IX Item "append( variable, value )"
Appends \fIvalue\fR to the end of \fIvariable\fR and returns a reference to it.
Accepts an array or a scalar.
.IP "echo( arg, ... )" 4
.IX Item "echo( arg, ... )"
Prints out one or more arguments using the \f(CW\*(C`print\*(C'\fR function.
The difference is that echo automatically appends a newline character
.IP "funcref( funcname )" 4
.IX Item "funcref( funcname )"
Returns a reference to the function \fIfuncname\fR if it exists, otherwise it returns
\&\f(CW\*(C`undef\*(C'\fR.
.Sp
Use this function to test for the existtence of a particular function.
.IP "max( a, b )" 4
.IX Item "max( a, b )"
Returns the greater of the two parameters.
.IP "min( a, b )" 4
.IX Item "min( a, b )"
Returns the lesser of the two parameters.
.IP "printarray( array )" 4
.IX Item "printarray( array )"
.PD 0
.IP "printarray( arrayref )" 4
.IX Item "printarray( arrayref )"
.PD
Prints the contents of an array. The parameter can be any valid array or array reference.
.IP "printerr( \s-1ARG, ...\s0 )" 4
.IX Item "printerr( ARG, ... )"
Prints one or more arguments to \s-1STDERR.\s0
.IP "printhash( hash )" 4
.IX Item "printhash( hash )"
.PD 0
.IP "printhash( hashref )" 4
.IX Item "printhash( hashref )"
.PD
Prints the contents of a hash. The parameter can be any valid hash or hash reference.
.IP "str( arg, ... )" 4
.IX Item "str( arg, ... )"
Concatenates the arguments into a string. Requires at least one argument.
.IP "strextract( \s-1PATTERN, STRING\s0 )" 4
.IX Item "strextract( PATTERN, STRING )"
.PD 0
.IP "strextract( \s-1PATTERN, STRING, GROUPLIST\s0 )" 4
.IX Item "strextract( PATTERN, STRING, GROUPLIST )"
.PD
Extracts a substring from \fI\s-1STRING\s0\fR according to \fI\s-1PATTERN\s0\fR, which is expected to be a precompiled
regular expression. Use the \fIqr()\fR function (documented in \*(L"qr/STRING/\*(R" in perlfunc) to make
\&\fI\s-1PATTERN\s0\fR.
.Sp
In the first form, \fIstrextract()\fR extracts the portion of \fI\s-1STRING\s0\fR that matches \fI\s-1PATTERN\s0\fR, or
an empty string in the case of failure.
If it is called in a scalar context, only the first match is returned.
But in a list context a list of all matching substrings are returned.
.Sp
In the second form, \fIstrextract()\fR returns one or matches of subexpressions in \fI\s-1PATTERN\s0\fR.
In a scalar context only the first match is returned.
In a list context all matches are returned as an array, and each element corresponds to a group
number parameter. For example, \f(CW\*(C`strextract(qr/(like).*(donuts)/, $string, 1, 2)\*(C'\fR will return
a list of strings that correspond to \f(CW$1\fR and \f(CW$2\fR, respectively.
.Sp
In all examples, assume the following:
.Sp
.Vb 1
\&    my $string = "I like donuts";
.Ve
.Sp
Example 1 (returning a whole match):
.Sp
.Vb 2
\&    my $match = strextract(qr/donuts/, $string);
\&    echo $match; # prints "donuts"
.Ve
.Sp
Example 2 (returning a subgroup of a match):
.Sp
.Vb 2
\&    my $match = strextract(qr/do(nuts)/, $string, 1);
\&    echo $string, "I like", $match; # prints "I like donuts! I like nuts"
.Ve
.Sp
Example 3 (getting multiple subexpression matches):
.Sp
.Vb 2
\&    my @matches = strextract(qr/(like).*(donuts)/, $string, 1, 2);
\&    echo @matches; # prints "like donuts"
.Ve
